#include <SFML/Graphics.hpp>
#include <cmath>
#include <iostream>
#include "vector2F.h"
#include "Ball.h"

const double dt = 0.1;

void Collide_of_All_Balls(Ball* balls,int number_of_balls) {

	for (int i = 0; i < number_of_balls; ++i) {

		for (int j = 0; j < number_of_balls; ++j) {
			if (i != j) {
				balls[i].To_Collide_With_This_Ball(balls[j]);
			}
		}
	}
}

void DrawAllBalls(Ball* balls,sf::RenderWindow& window ,int number_of_balls) {
	for (int i = 0; i < number_of_balls; ++i) {

		balls[i].DrawBall(window);
	}	

}

void MoveAllBalls(Ball* balls,int number_of_balls) {

	for (int i = 0; i < number_of_balls; ++i) {
		balls[i].MoveBall();
	}
}

int main() {

    sf::RenderWindow window(sf::VideoMode(900, 600), "!!!!!!!!!!!!!!");
    window.setFramerateLimit(80);

	int number_of_balls = 0;
	std::cout<<"Enter the number of balls: ";
	std::cin>>number_of_balls;

	Ball* balls = new Ball[number_of_balls];

	for (int i = 0; i < number_of_balls; ++i) {

		balls[i].r = 10;
		balls[i].x = rand()%800;
		balls[i].y = rand()%600;
		balls[i].Vx = rand()%20;
		balls[i].Vy = rand()%20;
	}

   while (window.isOpen()){

        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();

        DrawAllBalls(balls,window,number_of_balls);
        MoveAllBalls(balls,number_of_balls);
        Collide_of_All_Balls(balls,number_of_balls);

        window.display();
        
	}
	delete[] balls;
	return 0;
}
